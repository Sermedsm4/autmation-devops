name: Sermed's Data Pipeline

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - requirements.txt
  pull_request:
    branches:
      - main
    paths:
      - Dockerfile
      - requirements.txt
  workflow_dispatch:
    inputs:
      log_errors:
        description: 'Log errors if tests fail'
        required: true
        default: 'true'
env:
 PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Steg 1: Kolla ut koden från GitHub
      - name: Checkout repository
        uses: actions/checkout@v3

      # Steg 2: Sätt upp Python-miljön
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Steg 3: Installera beroenden
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Steg 4: Kör unit tester
      - name: Run unit tests
        run: |
          python -m unittest discover -s tests
        env:
          LOG_ERRORS: ${{ github.event.inputs.log_errors }}
        continue-on-error: false  # Stoppa om testerna misslyckas

      # Steg 5: Ladda upp fel logg om tester misslyckas
      - name: Upload error log if tests fail
        if: failure() && github.event.inputs.log_errors == 'true'
        run: |
          echo "Test results: Failure detected" > error.log
          echo "Error log generated at: $(date)" >> error.log
        env:
          LOG_ERRORS: ${{ github.event.inputs.log_errors }}

      # Steg 6: Ladda upp fel logg artefakt
      - name: Upload error log artifact
        if: failure() && github.event.inputs.log_errors == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: error-log
          path: error.log

  build:
    runs-on: ubuntu-latest
    needs: test  # Bygg bara om testerna är godkända
    if: success()  # Kör endast om testet är godkänt
    steps:
      # Steg 1: Kolla ut koden från GitHub
      - name: Checkout repository
        uses: actions/checkout@v3

      # Steg 2: Sätt upp Docker Buildx för byggande av bilder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Steg 3: Logga in på DockerHub
      - name: DockerHub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Steg 4: Bygg Docker bild
      - name: Build Docker image
        run: |
          IMAGE_TAG="sermed-data-pipeline:${GITHUB_SHA}"
          docker build -t $IMAGE_TAG .
          echo "Docker image built: $IMAGE_TAG"

      # Steg 5: Ladda upp Docker bild till DockerHub
      - name: Push Docker image
        run: |
          IMAGE_TAG="sermed-data-pipeline:${GITHUB_SHA}"
          docker push $IMAGE_TAG
          echo "Docker image pushed: $IMAGE_TAG"
